// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$inst-name: 'inst'
$inst-x: 28px
$inst-y: 0px
$inst-offset-x: -28px
$inst-offset-y: 0px
$inst-width: 27px
$inst-height: 26px
$inst-total-width: 129px
$inst-total-height: 26px
$inst-image: '../images/sprite.png'
$inst: (28px, 0px, -28px, 0px, 27px, 26px, 129px, 26px, '../images/sprite.png', 'inst', )
$telegram-name: 'telegram'
$telegram-x: 65px
$telegram-y: 0px
$telegram-offset-x: -65px
$telegram-offset-y: 0px
$telegram-width: 27px
$telegram-height: 26px
$telegram-total-width: 129px
$telegram-total-height: 26px
$telegram-image: '../images/sprite.png'
$telegram: (65px, 0px, -65px, 0px, 27px, 26px, 129px, 26px, '../images/sprite.png', 'telegram', )
$vk-name: 'vk'
$vk-x: 102px
$vk-y: 0px
$vk-offset-x: -102px
$vk-offset-y: 0px
$vk-width: 27px
$vk-height: 26px
$vk-total-width: 129px
$vk-total-height: 26px
$vk-image: '../images/sprite.png'
$vk: (102px, 0px, -102px, 0px, 27px, 26px, 129px, 26px, '../images/sprite.png', 'vk', )
$whatsapp-name: 'whatsapp'
$whatsapp-x: 0px
$whatsapp-y: 0px
$whatsapp-offset-x: 0px
$whatsapp-offset-y: 0px
$whatsapp-width: 18px
$whatsapp-height: 18px
$whatsapp-total-width: 129px
$whatsapp-total-height: 26px
$whatsapp-image: '../images/sprite.png'
$whatsapp: (0px, 0px, 0px, 0px, 18px, 18px, 129px, 26px, '../images/sprite.png', 'whatsapp', )
$spritesheet-width: 129px
$spritesheet-height: 26px
$spritesheet-image: '../images/sprite.png'
$spritesheet-sprites: ($inst, $telegram, $vk, $whatsapp, )
$spritesheet: (129px, 26px, '../images/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
